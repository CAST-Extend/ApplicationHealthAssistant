# ------------------------------------------------------------------------

FROM base-images.mgti-dal-so-art.mrshmc.com/mmc/ubuntu/nodejs-20:focal AS base

RUN apt-get update -qq \
    && apt-get install -y jq unzip openssl ca-certificates \
    && apt-get clean

#Make user root to create directories and install certificates
USER root

# Download the SSL certificate
RUN mkdir -p /usr/local/share/ca-certificates

# Copy the certificate from your local machine to the Docker image
COPY ./apps/api/castimaging.pem /usr/local/share/ca-certificates/castimaging.pem

ENV NODE_EXTRA_CA_CERTS=/usr/local/share/ca-certificates/castimaging.pem

RUN export NODE_EXTRA_CA_CERTS=/usr/local/share/ca-certificates/castimaging.pem

RUN update-ca-certificates --verbose --fresh && \
    npm config set cafile /usr/local/share/ca-certificates/castimaging.crt 
# ARG PLATFORM_VAULT_CLI_VERSION=v0.0.3
# # Install the platform CLI to be used for authenticating with Hashicorp Vault in AWS.
# RUN curl -L -o mpc https://mgti-dal-so-art.mrshmc.com/artifactory/raw/mmc-platform-cli/${PLATFORM_VAULT_CLI_VERSION} \
#     && chmod +x mpc \
#     && mv ./mpc /usr/bin

ARG PLATFORM_VAULT_CLI_VERSION
# Install the platform CLI to be used for authenticating with Hashicorp Vault in AWS.
RUN PLATFORM_VAULT_CLI_VERSION=$(curl -s https://mgti-dal-so-art.mrshmc.com/artifactory/raw/mmc-platform-cli/latest.txt) && curl -L -o mpc https://mgti-dal-so-art.mrshmc.com/artifactory/raw/mmc-platform-cli/${PLATFORM_VAULT_CLI_VERSION} \
    && chmod +x mpc \
    && mv ./mpc /usr/bin

# Switch to the less-privileged Node user in the container for improved security.
# See: https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md#non-root-user
# For predictability, use the same version of npm as is in the dev environment.

RUN useradd -m node
USER node
RUN mkdir -p /home/node/app
WORKDIR /home/node/app

# Skip cypress installation on the off chance it's included in a package.json. 
# The cypress install can blow up the size of the container image.
ENV CYPRESS_INSTALL_BINARY=0

# Allow Node debugging port to be exposed
ENV DEBUG=5858
EXPOSE $DEBUG

FROM base AS prod


ARG DIST_FOLDER_LOCATION


COPY --chown=node:node $DIST_FOLDER_LOCATION /home/node/app/
COPY --chown=node:node ./package-lock.json /home/node/app/
COPY .npmrc .npmrc

RUN npm ci --production && npm cache clean --force

EXPOSE  8080

USER root
COPY --chown=node:node ./deployments/docker/entrypoint.sh ./entrypoint.sh
RUN chmod u+x entrypoint.sh
ENTRYPOINT ["./entrypoint.sh"]
CMD [ "node", "./main.js" ]

# Record build metadata in the image
ARG BUILD_DATE_TIME
LABEL BUILD_DATE_TIME $BUILD_DATE_TIME
ENV BUILD_DATE_TIME $BUILD_DATE_TIME

ARG BUILD_GIT_COMMIT
LABEL BUILD_GIT_COMMIT $BUILD_GIT_COMMIT
ENV BUILD_GIT_COMMIT $BUILD_GIT_COMMIT

ARG BUILD_VERSION
LABEL BUILD_VERSION $BUILD_VERSION
ENV BUILD_VERSION $BUILD_VERSION

LABEL APPLICATIONKEY "AHA"